default: &default
  adapter: postgis # Uses postgis, see guide at https://medium.com/@Evert_Salinas/creating-a-basic-geolocation-search-application-with-postgis-and-rails-part-i-6f7c8985b6da
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

default_cache: &default_cache
  <<: *default
  adapter: postgresql
  migrations_paths: db/cache_migrate

development:
  primary:
    <<: *default
    database: lokaler_lnu_no_development
  cache:
    <<: *default_cache
    database: lokaler_lnu_no_development_cache

test:
  primary:
    <<: *default
    # For details on connection pooling, see Rails configuration guide
    # https://guides.rubyonrails.org/configuring.html#database-pooling
    database: lokaler_lnu_no_test<%= ENV['TEST_ENV_NUMBER'] %>
  cache:
    <<: *default_cache
    database: lokaler_lnu_no_test<%= ENV['TEST_ENV_NUMBER'] %>_cache

production:
  primary:
    <<: *default
    # This fixes an Heroku bug where it doesn't respect the postgis adapter,
    # see https://devcenter.heroku.com/articles/rails-database-connection-behavior
    url: <%= ENV.fetch('DATABASE_URL', '').sub(/^postgres/, "postgis") %>
  cache:
    <<: *default_cache
    database: lokaler_lnu_no_production_cache


